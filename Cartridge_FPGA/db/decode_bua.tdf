--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 22.1 cbx_cycloneii 2023:07:21:07:12:21:SC cbx_lpm_add_sub 2023:07:21:07:12:21:SC cbx_lpm_compare 2023:07:21:07:12:21:SC cbx_lpm_decode 2023:07:21:07:12:20:SC cbx_mgl 2023:07:21:07:12:36:SC cbx_nadder 2023:07:21:07:12:21:SC cbx_stratix 2023:07:21:07:12:21:SC cbx_stratixii 2023:07:21:07:12:21:SC  VERSION_END


-- Copyright (C) 2023  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2525w[1..0]	: WIRE;
	w_anode2534w[3..0]	: WIRE;
	w_anode2551w[3..0]	: WIRE;
	w_anode2561w[3..0]	: WIRE;
	w_anode2571w[3..0]	: WIRE;
	w_anode2581w[3..0]	: WIRE;
	w_anode2591w[3..0]	: WIRE;
	w_anode2601w[3..0]	: WIRE;
	w_anode2611w[3..0]	: WIRE;
	w_anode2623w[1..0]	: WIRE;
	w_anode2630w[3..0]	: WIRE;
	w_anode2641w[3..0]	: WIRE;
	w_anode2651w[3..0]	: WIRE;
	w_anode2661w[3..0]	: WIRE;
	w_anode2671w[3..0]	: WIRE;
	w_anode2681w[3..0]	: WIRE;
	w_anode2691w[3..0]	: WIRE;
	w_anode2701w[3..0]	: WIRE;
	w_data2523w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode2701w[3..3], w_anode2691w[3..3], w_anode2681w[3..3], w_anode2671w[3..3], w_anode2661w[3..3], w_anode2651w[3..3], w_anode2641w[3..3], w_anode2630w[3..3]), ( w_anode2611w[3..3], w_anode2601w[3..3], w_anode2591w[3..3], w_anode2581w[3..3], w_anode2571w[3..3], w_anode2561w[3..3], w_anode2551w[3..3], w_anode2534w[3..3]));
	w_anode2525w[] = ( (w_anode2525w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2534w[] = ( (w_anode2534w[2..2] & (! w_data2523w[2..2])), (w_anode2534w[1..1] & (! w_data2523w[1..1])), (w_anode2534w[0..0] & (! w_data2523w[0..0])), w_anode2525w[1..1]);
	w_anode2551w[] = ( (w_anode2551w[2..2] & (! w_data2523w[2..2])), (w_anode2551w[1..1] & (! w_data2523w[1..1])), (w_anode2551w[0..0] & w_data2523w[0..0]), w_anode2525w[1..1]);
	w_anode2561w[] = ( (w_anode2561w[2..2] & (! w_data2523w[2..2])), (w_anode2561w[1..1] & w_data2523w[1..1]), (w_anode2561w[0..0] & (! w_data2523w[0..0])), w_anode2525w[1..1]);
	w_anode2571w[] = ( (w_anode2571w[2..2] & (! w_data2523w[2..2])), (w_anode2571w[1..1] & w_data2523w[1..1]), (w_anode2571w[0..0] & w_data2523w[0..0]), w_anode2525w[1..1]);
	w_anode2581w[] = ( (w_anode2581w[2..2] & w_data2523w[2..2]), (w_anode2581w[1..1] & (! w_data2523w[1..1])), (w_anode2581w[0..0] & (! w_data2523w[0..0])), w_anode2525w[1..1]);
	w_anode2591w[] = ( (w_anode2591w[2..2] & w_data2523w[2..2]), (w_anode2591w[1..1] & (! w_data2523w[1..1])), (w_anode2591w[0..0] & w_data2523w[0..0]), w_anode2525w[1..1]);
	w_anode2601w[] = ( (w_anode2601w[2..2] & w_data2523w[2..2]), (w_anode2601w[1..1] & w_data2523w[1..1]), (w_anode2601w[0..0] & (! w_data2523w[0..0])), w_anode2525w[1..1]);
	w_anode2611w[] = ( (w_anode2611w[2..2] & w_data2523w[2..2]), (w_anode2611w[1..1] & w_data2523w[1..1]), (w_anode2611w[0..0] & w_data2523w[0..0]), w_anode2525w[1..1]);
	w_anode2623w[] = ( (w_anode2623w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2630w[] = ( (w_anode2630w[2..2] & (! w_data2523w[2..2])), (w_anode2630w[1..1] & (! w_data2523w[1..1])), (w_anode2630w[0..0] & (! w_data2523w[0..0])), w_anode2623w[1..1]);
	w_anode2641w[] = ( (w_anode2641w[2..2] & (! w_data2523w[2..2])), (w_anode2641w[1..1] & (! w_data2523w[1..1])), (w_anode2641w[0..0] & w_data2523w[0..0]), w_anode2623w[1..1]);
	w_anode2651w[] = ( (w_anode2651w[2..2] & (! w_data2523w[2..2])), (w_anode2651w[1..1] & w_data2523w[1..1]), (w_anode2651w[0..0] & (! w_data2523w[0..0])), w_anode2623w[1..1]);
	w_anode2661w[] = ( (w_anode2661w[2..2] & (! w_data2523w[2..2])), (w_anode2661w[1..1] & w_data2523w[1..1]), (w_anode2661w[0..0] & w_data2523w[0..0]), w_anode2623w[1..1]);
	w_anode2671w[] = ( (w_anode2671w[2..2] & w_data2523w[2..2]), (w_anode2671w[1..1] & (! w_data2523w[1..1])), (w_anode2671w[0..0] & (! w_data2523w[0..0])), w_anode2623w[1..1]);
	w_anode2681w[] = ( (w_anode2681w[2..2] & w_data2523w[2..2]), (w_anode2681w[1..1] & (! w_data2523w[1..1])), (w_anode2681w[0..0] & w_data2523w[0..0]), w_anode2623w[1..1]);
	w_anode2691w[] = ( (w_anode2691w[2..2] & w_data2523w[2..2]), (w_anode2691w[1..1] & w_data2523w[1..1]), (w_anode2691w[0..0] & (! w_data2523w[0..0])), w_anode2623w[1..1]);
	w_anode2701w[] = ( (w_anode2701w[2..2] & w_data2523w[2..2]), (w_anode2701w[1..1] & w_data2523w[1..1]), (w_anode2701w[0..0] & w_data2523w[0..0]), w_anode2623w[1..1]);
	w_data2523w[2..0] = data_wire[2..0];
END;
--VALID FILE
